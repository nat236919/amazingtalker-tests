# 003

## Unit test

Whenever a new commit submits in GitHub. We always run the CI process to build up the docker image for the server. At the same time. We run test cases to make sure all functionality fine. Please design unit test cases for the following "TeacherDataAccessObject". It's OK to write down the cases what you are going to verify without implementation. There is no any constraint on the format. We will follow up the detail in the interview soon.

```go
package main

import (
 "time"

 "github.com/jinzhu/gorm"
)

// ============= DO NOT EDIT =============

//var db gorm.DB         // connected db client
//var cache redis.Client // connected redis client
//var logger zap.Logger  // some useful logger for all developers in company

type MessageName string

const (
 TeacherCreated MessageName = "teacher_created"
)

type Teacher struct {
 ID        int64      `json:"id"`
 Name      string     `json:"name"`
 DeletedAt *time.Time `json:"deleted_at"`
}

type MessageQueue interface {
 Publish(MessageName, map[string]interface{}) error
}

type TeacherDataAccessObject interface {
 CreateTeacher(string) (*Teacher, error)
}

type TeacherDAO struct {
 mq MessageQueue
 db *gorm.DB
}

func NewTeacherDAO(mqClient MessageQueue, dbClient *gorm.DB) TeacherDataAccessObject {
 return TeacherDAO{
  mq: mqClient,
  db: dbClient,
 }
}

func (dao TeacherDAO) CreateTeacher(name string) (*Teacher, error) {

  if name == "" {
    return nil, errors.New("name should not be empty")
  }

 teacher := Teacher{Name: name}

 r := dao.db.Create(teacher)

 if r.Error != nil {
  return nil, r.Error
 }

 payload := map[string]interface{}{
  "teacherId": teacher.ID,
 }

 err := dao.mq.Publish(TeacherCreated, payload)

 if err != nil {
  // use logger here
 }

 return &teacher, nil
}
```

## Answers

To ensure the **TeacherDAO** implementation works as expected, we should write test cases for the different scenarios. Below is a list of suggested test cases I can think of:

## 1. Validation Tests

### 1.1 Empty Name Input

- **Description**: Test behavior when the `name` argument is an empty string.
- **Expected Result**: Should return an error `"name should not be empty"`.

---

## 2. Database Interaction Tests

### 2.1 Successful Teacher Creation

- **Description**: Mock the database to simulate successful insertion of a new `Teacher`.
- **Expected Result**: The returned `Teacher` object should have the correct `Name` and a valid `ID`.

### 2.2 Database Failure

- **Description**: Mock the database to simulate a failure (e.g., connection issue, unique constraint violation).
- **Expected Result**: Should return the error from `dao.db.Create()`.

---

## 3. Message Queue Interaction Tests

### 3.1 Successful Message Publish

- **Description**: Mock the message queue to simulate successful publishing of the `TeacherCreated` event.
- **Expected Result**: Should call `mq.Publish()` with the correct payload (`teacherId`).

### 3.2 Message Queue Failure

- **Description**: Mock the message queue to simulate a failure (e.g., network issue).
- **Expected Result**: Should log the error but still return the created `Teacher` object.

---

## 4. Integration Tests

### 4.1 Full Success

- **Description**: Simulate a scenario where both the database and message queue work correctly.
- **Expected Result**: Should create the `Teacher` and publish the event without errors.

### 4.2 Partial Failure

- **Description**: Simulate successful database insertion but message queue failure.
- **Expected Result**: The `Teacher` is returned, but an error is logged for the message queue.

### 4.3 Complete Failure

- **Description**: Simulate a failure in both the database and message queue.
- **Expected Result**: Should return the database error and not attempt to publish to the message queue.

---

## 5. Edge Case Tests

### 5.1 Very Long Name

- **Description**: Test behavior with extremely long `name` input to check for potential issues (e.g., database field size limits).
- **Expected Result**: Should handle it gracefully or return a meaningful error.

### 5.2 Special Characters in Name

- **Description**: Test behavior with `name` containing special characters or SQL injection patterns.
- **Expected Result**: Should handle it safely without security vulnerabilities.
